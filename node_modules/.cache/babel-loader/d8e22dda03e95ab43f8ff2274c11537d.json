{"ast":null,"code":"const sortObjKeys = obj => {\n  return Object.assign(...Object.entries(obj).sort().map(_ref => {\n    let [key, value] = _ref;\n    return {\n      [key]: value\n    };\n  }));\n};\n\nexport const sortCards = list => {\n  let sortedCards = {}; // for each object in our array (list)\n  // we're going to rebuild an object sorted by archetype\n\n  for (let index = 0; index < list.length; index++) {\n    const {\n      archetype\n    } = list[index];\n\n    if (sortedCards[archetype]) {\n      // Check if it already exists and push into existing array\n      sortedCards[archetype].push(list[index]);\n    } else {\n      // else reassign the object with the new archtype and card\n      sortedCards = { ...sortedCards,\n        [archetype]: [list[index]]\n      }.sort();\n    }\n  }\n\n  const sortedKeys = sortObjKeys(sortedCards);\n  debugger;\n  return sortedKeys;\n};\nexport const truncateDesc = desc => {\n  // return the string if it's less than our desired amount\n  if (desc.length <= 64) {\n    return desc;\n  } // return our cut down string with ... added\n\n\n  return desc.slice(0, 126) + '...';\n};","map":{"version":3,"sources":["/home/rob/SSD2/projects/datto-app/src/components/methods/methods.js"],"names":["sortObjKeys","obj","Object","assign","entries","sort","map","key","value","sortCards","list","sortedCards","index","length","archetype","push","sortedKeys","truncateDesc","desc","slice"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,GAAG,IAAI;AAC1B,SAAOC,MAAM,CAACC,MAAP,CAAc,GAAGD,MAAM,CAACE,OAAP,CAAeH,GAAf,EAAoBI,IAApB,GAA2BC,GAA3B,CAA+B,QAAkB;AAAA,QAAjB,CAACC,GAAD,EAAMC,KAAN,CAAiB;AACxE,WAAO;AACN,OAACD,GAAD,GAAOC;AADD,KAAP;AAGA,GAJuB,CAAjB,CAAP;AAKC,CANF;;AAQA,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAI;AAChC,MAAIC,WAAW,GAAG,EAAlB,CADgC,CAEhC;AACA;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,IAAI,CAACG,MAAjC,EAAyCD,KAAK,EAA9C,EAAkD;AACjD,UAAM;AACLE,MAAAA;AADK,QAEFJ,IAAI,CAACE,KAAD,CAFR;;AAGA,QAAID,WAAW,CAACG,SAAD,CAAf,EAA4B;AAC3B;AACAH,MAAAA,WAAW,CAACG,SAAD,CAAX,CAAuBC,IAAvB,CAA4BL,IAAI,CAACE,KAAD,CAAhC;AACA,KAHD,MAGO;AACN;AACAD,MAAAA,WAAW,GAAG,EACb,GAAGA,WADU;AAEb,SAACG,SAAD,GAAa,CACZJ,IAAI,CAACE,KAAD,CADQ;AAFA,QAKZP,IALY,EAAd;AAMA;AACD;;AACD,QAAMW,UAAU,GAAGhB,WAAW,CAACW,WAAD,CAA9B;AACA;AACA,SAAOK,UAAP;AACA,CAxBM;AA0BP,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAI;AACnC;AACA,MAAIA,IAAI,CAACL,MAAL,IAAe,EAAnB,EAAuB;AACtB,WAAOK,IAAP;AACA,GAJkC,CAKnC;;;AACA,SAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,GAAd,IAAqB,KAA5B;AACA,CAPM","sourcesContent":["const sortObjKeys = obj => {\n\treturn Object.assign(...Object.entries(obj).sort().map(([key, value]) => {\n\t\treturn {\n\t\t\t[key]: value\n\t\t}\n\t}));\n };\n\nexport const sortCards = list => {\n\tlet sortedCards = {};\n\t// for each object in our array (list)\n\t// we're going to rebuild an object sorted by archetype\n\tfor (let index = 0; index < list.length; index++) {\n\t\tconst {\n\t\t\tarchetype,\n\t\t} = list[index];\n\t\tif (sortedCards[archetype]) {\n\t\t\t// Check if it already exists and push into existing array\n\t\t\tsortedCards[archetype].push(list[index])\n\t\t} else {\n\t\t\t// else reassign the object with the new archtype and card\n\t\t\tsortedCards = {\n\t\t\t\t...sortedCards,\n\t\t\t\t[archetype]: [\n\t\t\t\t\tlist[index],\n\t\t\t\t],\n\t\t\t}.sort();\n\t\t}\n\t}\n\tconst sortedKeys = sortObjKeys(sortedCards);\n\tdebugger\n\treturn sortedKeys;\n}\n\nexport const truncateDesc = desc => {\n\t// return the string if it's less than our desired amount\n\tif (desc.length <= 64) {\n\t\treturn desc\n\t}\n\t// return our cut down string with ... added\n\treturn desc.slice(0, 126) + '...'\n}\n"]},"metadata":{},"sourceType":"module"}